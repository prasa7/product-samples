/*
 * WSO2 API Manager - Store
 * This specifies a **RESTful API** for WSO2 **API Manager** - Store.  Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.1.66/components/apimgt/org.wso2.carbon.apimgt.rest.api.store/src/main/resources/store-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification. 
 *
 * OpenAPI spec version: 0.11.0
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.wso2.carbon.apimgt.samples.utils.store.rest.client.api;

import org.wso2.carbon.apimgt.samples.utils.store.rest.client.ApiException;
import org.wso2.carbon.apimgt.samples.utils.store.rest.client.model.Application;
import org.wso2.carbon.apimgt.samples.utils.store.rest.client.model.ApplicationKey;
import org.wso2.carbon.apimgt.samples.utils.store.rest.client.model.ApplicationKeyGenerateRequest;
import org.wso2.carbon.apimgt.samples.utils.store.rest.client.model.Error;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApplicationIndividualApi
 */
@Ignore
public class ApplicationIndividualApiTest {

    private final ApplicationIndividualApi api = new ApplicationIndividualApi();

    
    /**
     * Remove an application 
     *
     * This operation can be used to remove an application specifying its id. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void applicationsApplicationIdDeleteTest() throws ApiException {
        String applicationId = null;
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        api.applicationsApplicationIdDelete(applicationId, ifMatch, ifUnmodifiedSince);

        // TODO: test validations
    }
    
    /**
     * Get details of an application 
     *
     * This operation can be used to retrieve details of an individual application specifying the application id in the URI. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void applicationsApplicationIdGetTest() throws ApiException {
        String applicationId = null;
        String accept = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        Application response = api.applicationsApplicationIdGet(applicationId, accept, ifNoneMatch, ifModifiedSince);

        // TODO: test validations
    }
    
    /**
     * Get key details of a given type 
     *
     * This operation can be used to retrieve key details of an individual application specifying the key type in the URI. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void applicationsApplicationIdKeysKeyTypeGetTest() throws ApiException {
        String applicationId = null;
        String keyType = null;
        String groupId = null;
        String accept = null;
        ApplicationKey response = api.applicationsApplicationIdKeysKeyTypeGet(applicationId, keyType, groupId, accept);

        // TODO: test validations
    }
    
    /**
     * Update grant types and callback url of an application 
     *
     * This operation can be used to update grant types and callback url of an application. (Consumer Key and Consumer Secret are ignored) Upon succesfull you will retrieve the updated key details as the response. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void applicationsApplicationIdKeysKeyTypePutTest() throws ApiException {
        String applicationId = null;
        String keyType = null;
        ApplicationKey body = null;
        ApplicationKey response = api.applicationsApplicationIdKeysKeyTypePut(applicationId, keyType, body);

        // TODO: test validations
    }
    
    /**
     * Update an application 
     *
     * This operation can be used to update an application. Upon succesfull you will retrieve the updated application as the response. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void applicationsApplicationIdPutTest() throws ApiException {
        String applicationId = null;
        Application body = null;
        String contentType = null;
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        Application response = api.applicationsApplicationIdPut(applicationId, body, contentType, ifMatch, ifUnmodifiedSince);

        // TODO: test validations
    }
    
    /**
     * Generate keys for application 
     *
     * This operation can be used to generate client Id and client secret for an application 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void applicationsGenerateKeysPostTest() throws ApiException {
        String applicationId = null;
        ApplicationKeyGenerateRequest body = null;
        String contentType = null;
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        ApplicationKey response = api.applicationsGenerateKeysPost(applicationId, body, contentType, ifMatch, ifUnmodifiedSince);

        // TODO: test validations
    }
    
    /**
     * Create a new application 
     *
     * This operation can be used to create a new application specifying the details of the application in the payload. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void applicationsPostTest() throws ApiException {
        Application body = null;
        String contentType = null;
        Application response = api.applicationsPost(body, contentType);

        // TODO: test validations
    }
    
}
